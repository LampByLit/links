---
alwaysApply: true
---

# Lynx - Customizable Link Preview Generator

## Project Overview

ATTENTION: 
!! NEVER GO OUTSIDE THE SCOPE OF THE TASK BEING DELEGATED !!
!! ASK QUESTIONS IF NECESSARY !!
!! CLOSE TERMINALS WHEN YOU ARE FINISHED USING THEM !!

**Lynx** is a customizable link preview generator that creates Twitter Cards with user-uploaded images and custom metadata. The app allows users to upload an image, add a destination link, and optionally include title/description text. It generates a unique shareable URL that displays as a custom Twitter Card when posted on X (Twitter), with the image being clickable and redirecting to the target link.

### Core Innovation
Since images aren't directly clickable on Twitter, Lynx creates a workaround by making the entire card preview clickable through proper metadata implementation.

## Technical Architecture

### Core Components
1. **Frontend**: Image upload form with link input and metadata fields
2. **Backend**: API to handle uploads, generate slugs, and serve card pages
3. **Database**: Store card metadata and track analytics
4. **Image Processing**: Optimize/resize images for Twitter Card standards
5. **Card Renderer**: Serve pages with proper Open Graph/Twitter Card metadata

### Technology Stack
- **Frontend**: React with TypeScript, Tailwind CSS, and Material Design styling
- **Backend**: Node.js with Express and TypeScript (integrated with frontend)
- **Database**: SQLite with Prisma ORM (MVP) â†’ PostgreSQL with Prisma (production)
- **Image Processing**: Sharp (Node.js) for image optimization and resizing
- **Image Storage**: Railway persistent volumes in `/data` directory
- **Hosting**: Railway (primary deployment platform)
- **Repository**: GitHub (https://github.com/LampByLit/lynx)
- **Brand**: Part of the LampByLit ecosystem (https://lampbylit.com)
- **Language**: TypeScript throughout the entire stack for type safety

## Development Phases

### Phase 1: MVP (Weekend Project)
- [ ] Basic upload form (image + link + title/description)
- [ ] Image optimization (resize to 1200x628px, compress)
- [ ] Slug generation (hash-based or random)
- [ ] Database schema for cards
- [ ] Card page rendering with Twitter Card metadata
- [ ] Redirect functionality for human visitors
- [ ] Basic previewer to show users what their card will look like

### Phase 2: Stability & Polish
- [ ] Switch to Postgres database
- [ ] Cloud image hosting (S3/Cloudinary)
- [ ] Deduplication via content hashing
- [ ] Basic analytics (click tracking)
- [ ] Rate limiting and abuse prevention
- [ ] URL validation and security checks

### Phase 3: Advanced Features
- [ ] Editable cards
- [ ] Custom slugs
- [ ] Analytics dashboard (optional)
- [ ] A/B testing for different card designs
- [ ] Integration with other platforms (Discord, LinkedIn, Facebook)
- [ ] Link tracking and analytics (optional)

## Technical Specifications

### Image Optimization Requirements
- **Target Sizes**: 
  - 1200x628px (16:9 aspect ratio) for optimal display
  - 1200x600px (2:1 aspect ratio) for X Cards compliance
- **X Cards Requirements**: 2:1 aspect ratio, minimum 300x157px, maximum 4096x4096px
- **Minimum Size**: 800x418px (our standard), 300x157px (X Cards minimum)
- **Format**: WebP or JPEG with 70-85% quality
- **Supported Formats**: JPG, PNG, WEBP, GIF (per X Cards spec)
- **Processing**: Automatic resizing, smart cropping, compression
- **File Size Limit**: 5-10MB max upload to prevent abuse
- **HTTPS Required**: All image URLs must use HTTPS for X Cards
- **Storage**: Optimized images stored in `/data/uploads` directory
- **User Image Control**: Users can upload either 16:9 or 2:1 aspect ratio images, and the app provides image centering/cropping functionality when uploaded images don't match the proper size or ratio, giving users control over how their image appears in the Twitter Card preview

### Database Schema (Prisma)

#### Prisma Schema File (`prisma/schema.prisma`)
```prisma
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Card {
  id          String   @id @default(cuid())
  slug        String   @unique
  targetUrl   String   @map("target_url")
  title       String?
  description String?
  imageUrl    String   @map("image_url")
  createdAt   DateTime @default(now()) @map("created_at")
  clickCount  Int      @default(0) @map("click_count")
  
  clicks      Click[]
  
  @@map("cards")
}

model Click {
  id        String   @id @default(cuid())
  cardSlug  String   @map("card_slug")
  timestamp DateTime @default(now())
  ipAddress String?  @map("ip_address")
  userAgent String?  @map("user_agent")
  referrer  String?
  
  card      Card     @relation(fields: [cardSlug], references: [slug])
  
  @@map("clicks")
  @@index([cardSlug])
  @@index([timestamp])
}
```

#### Environment Variables
```env
# Database
DATABASE_URL="file:./dev.db"

# Production (Railway)
# DATABASE_URL="postgresql://username:password@host:port/database"

# Application
NODE_ENV="development"
PORT=3000

# Rate Limiting (configurable)
RATE_LIMIT_WINDOW_MS=120000  # 2 minutes
RATE_LIMIT_MAX_REQUESTS=1    # 1 request per window

# File Upload
UPLOAD_MAX_SIZE=10485760     # 10MB
UPLOAD_DIR="/data/uploads"

# Branding
TWITTER_SITE_HANDLE="@lampbylit"
SITE_NAME="Lynx by LampByLit"
```

### X Cards Implementation

#### Summary Card with Large Image (Primary Card Type)
```html
<meta name="twitter:card" content="summary_large_image">
<meta name="twitter:site" content="@lampbylit">
<meta name="twitter:title" content="User Title">
<meta name="twitter:description" content="User Description">
<meta name="twitter:image" content="https://yourapp.com/uploads/image.png">
<meta name="twitter:url" content="https://yourapp.com/slug">
<meta property="og:url" content="https://yourapp.com/slug">
<meta property="og:type" content="website">
<meta property="og:title" content="User Title">
<meta property="og:description" content="User Description">
<meta property="og:image" content="https://yourapp.com/uploads/image.png">
```

#### App Card (For Mobile App Promotion)
```html
<meta name="twitter:card" content="app">
<meta name="twitter:site" content="@lampbylit">
<meta name="twitter:description" content="Brief description of your app.">
<meta name="twitter:app:country" content="US">
<meta name="twitter:app:name:iphone" content="App Name">
<meta name="twitter:app:id:iphone" content="App Store ID">
<meta name="twitter:app:url:iphone" content="App URL Scheme">
<meta name="twitter:app:name:ipad" content="App Name">
<meta name="twitter:app:id:ipad" content="App Store ID">
<meta name="twitter:app:url:ipad" content="App URL Scheme">
<meta name="twitter:app:name:googleplay" content="App Name">
<meta name="twitter:app:id:googleplay" content="Google Play Store ID">
<meta name="twitter:app:url:googleplay" content="App URL Scheme">
```

#### Player Card (For Video/Audio Content)
```html
<meta name="twitter:card" content="player">
<meta name="twitter:site" content="@lampbylit">
<meta name="twitter:title" content="Title of your media">
<meta name="twitter:description" content="Description of your media">
<meta name="twitter:image" content="https://yourapp.com/uploads/thumbnail.png">
<meta name="twitter:player" content="https://yourapp.com/player/iframe">
<meta name="twitter:player:width" content="640">
<meta name="twitter:player:height" content="360">
<meta name="twitter:player:stream" content="https://yourapp.com/video/stream.mp4">
```

### X Cards Requirements & Best Practices

#### Image Specifications
- **Summary Card with Large Image**: 2:1 aspect ratio, minimum 300x157px, maximum 4096x4096px
- **Supported Formats**: JPG, PNG, WEBP, GIF
- **HTTPS Required**: All image URLs must use HTTPS
- **File Size**: Optimize for web delivery (recommended < 1MB)

#### Validation & Testing
- Use [X Card Validator](https://cards-dev.twitter.com/validator) to test implementations
- Test across all Twitter clients (web, mobile apps)
- Ensure responsive design for player cards
- Validate all URLs are accessible and use HTTPS

#### Implementation Guidelines
- Always include `twitter:site` with your official Twitter handle
- Provide fallback Open Graph tags for broader compatibility
- Ensure player content is responsive across devices
- Apps must be publicly available in app stores for proper rendering

### Redirect Strategy
- **For scrapers**: Serve full HTML with metadata first
- **For humans**: JavaScript or meta refresh redirect to target URL
- **Analytics**: Track clicks before redirecting

## Competitive Differentiation

### Key Differentiators
1. **Simplicity**: Minimal friction, no forced signups
2. **Image Optimization**: Automatic resizing/compression
3. **Visual Preview**: Real-time preview of how cards will appear
4. **Free Tier**: Generous free usage limits
5. **Creator-Focused**: Target indie creators, newsletters, meme pages
6. **Reliability**: Guaranteed consistent rendering across platforms

### Target Audience
- Indie creators and writers
- Newsletter publishers (Substack, Medium)
- Social media marketers
- Meme pages and content creators
- Small businesses and personal brands

## Security & Abuse Prevention

### Validation Requirements
- Validate URLs (prevent phishing or malicious redirects)
- Check uploaded images for malware
- Rate-limit card creation: 1 request per IP every 2 minutes (configurable)
- Sanitize filenames and validate file types
- File size limits: 10MB maximum upload

### Content Moderation
- Image content validation
- Spam detection
- Malicious link detection
- User reporting system

### X Cards Compliance
- Adhere to X Developer Policy and Display Requirements
- Ensure all URLs use HTTPS protocol
- Validate app store availability for App Cards
- Test player content across all Twitter clients
- Monitor card rendering consistency
- Implement proper fallback mechanisms

## Analytics & Tracking (Optional - Phase 3)

### Basic Metrics (Future Implementation)
- Click counts per card
- Geographic distribution
- Device/browser statistics
- Referrer tracking (Twitter, Discord, etc.)
- Time-based analytics

### Advanced Analytics (Future Implementation)
- Conversion tracking
- A/B testing capabilities
- User engagement metrics
- Custom dashboard for users

**Note**: Analytics and tracking are optional features that may be implemented in Phase 3 based on user demand and business needs.

## File Structure
```
lynx/
â”œâ”€â”€ src/
â”‚   â”œâ”€â”€ components/
â”‚   â”‚   â”œâ”€â”€ UploadForm.tsx
â”‚   â”‚   â”œâ”€â”€ CardPreview.tsx
â”‚   â”‚   â””â”€â”€ index.ts
â”‚   â”œâ”€â”€ pages/
â”‚   â”‚   â”œâ”€â”€ Home.tsx
â”‚   â”‚   â”œâ”€â”€ CardPage.tsx
â”‚   â”‚   â””â”€â”€ index.ts
â”‚   â”œâ”€â”€ routes/
â”‚   â”‚   â”œâ”€â”€ cards.ts
â”‚   â”‚   â”œâ”€â”€ upload.ts
â”‚   â”‚   â””â”€â”€ index.ts
â”‚   â”œâ”€â”€ middleware/
â”‚   â”‚   â”œâ”€â”€ validation.ts
â”‚   â”‚   â”œâ”€â”€ upload.ts
â”‚   â”‚   â””â”€â”€ rateLimit.ts
â”‚   â”œâ”€â”€ services/
â”‚   â”‚   â”œâ”€â”€ imageProcessing.ts
â”‚   â”‚   â””â”€â”€ cardService.ts
â”‚   â”œâ”€â”€ types/
â”‚   â”‚   â””â”€â”€ index.ts
â”‚   â”œâ”€â”€ utils/
â”‚   â”‚   â”œâ”€â”€ slugGenerator.ts
â”‚   â”‚   â””â”€â”€ validation.ts
â”‚   â”œâ”€â”€ styles/
â”‚   â”‚   â””â”€â”€ globals.css
â”‚   â””â”€â”€ app.ts
â”œâ”€â”€ prisma/
â”‚   â”œâ”€â”€ schema.prisma
â”‚   â”œâ”€â”€ migrations/
â”‚   â””â”€â”€ seed.ts
â”œâ”€â”€ public/
â”‚   â”œâ”€â”€ favicon.ico
â”‚   â””â”€â”€ images/
â”œâ”€â”€ data/
â”‚   â””â”€â”€ uploads/
â”œâ”€â”€ tests/
â”‚   â”œâ”€â”€ unit/
â”‚   â””â”€â”€ integration/
â”œâ”€â”€ docs/
â”œâ”€â”€ package.json
â”œâ”€â”€ tsconfig.json
â”œâ”€â”€ tailwind.config.js
â”œâ”€â”€ nodemon.json
â”œâ”€â”€ railway.toml
â”œâ”€â”€ .env.example
â”œâ”€â”€ .gitignore
â””â”€â”€ README.md
```

## Development Guidelines

### TypeScript & Node.js Setup

#### Backend Dependencies
```json
{
  "dependencies": {
    "express": "^4.18.2",
    "cors": "^2.8.5",
    "helmet": "^7.0.0",
    "multer": "^1.4.5-lts.1",
    "sharp": "^0.32.5",
    "@prisma/client": "^5.2.0",
    "dotenv": "^16.3.1",
    "express-rate-limit": "^6.10.0",
    "compression": "^1.7.4"
  },
  "devDependencies": {
    "@types/express": "^4.17.17",
    "@types/cors": "^2.8.13",
    "@types/multer": "^1.4.7",
    "@types/compression": "^1.7.2",
    "@types/node": "^20.4.5",
    "typescript": "^5.1.6",
    "ts-node": "^10.9.1",
    "nodemon": "^3.0.1",
    "jest": "^29.6.2",
    "@types/jest": "^29.5.3",
    "supertest": "^6.3.3",
    "@types/supertest": "^2.0.12",
    "prisma": "^5.2.0"
  }
}
```

#### Frontend Dependencies (Integrated with Backend)
```json
{
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "axios": "^1.4.0",
    "tailwindcss": "^3.3.3",
    "@mui/material": "^5.14.5",
    "@mui/icons-material": "^5.14.3",
    "@emotion/react": "^11.11.1",
    "@emotion/styled": "^11.11.0"
  },
  "devDependencies": {
    "@types/react": "^18.2.15",
    "@types/react-dom": "^18.2.7",
    "typescript": "^5.1.6",
    "eslint": "^8.45.0",
    "@typescript-eslint/eslint-plugin": "^6.2.0",
    "prettier": "^3.0.0",
    "autoprefixer": "^10.4.14",
    "postcss": "^8.4.27"
  }
}
```

### Code Standards
- **TypeScript**: Strict type checking enabled, no `any` types allowed
- **Node.js/Express**: RESTful API conventions with proper middleware
- **Error Handling**: Custom error classes with proper HTTP status codes
- **Testing**: Jest for unit tests, Supertest for API testing
- **Configuration**: Environment variables with validation using dotenv
- **Code Style**: ESLint + Prettier for consistent formatting
- **Type Safety**: Shared types between frontend and backend via shared package
- **API Design**: OpenAPI/Swagger documentation for all endpoints

### Performance Requirements
- **Image Processing**: Sharp library for fast image optimization and resizing
- **CDN Integration**: CloudFront or similar for global image delivery
- **Database**: Proper indexing on slug, created_at, and target_url columns
- **Caching**: Redis for frequently accessed cards and metadata
- **Compression**: Gzip compression for API responses
- **Rate Limiting**: Express-rate-limit for API protection

### Testing Strategy
- **Unit Tests**: Jest for testing individual functions and components
- **Integration Tests**: Supertest for API endpoint testing
- **E2E Tests**: Playwright for full user workflow testing
- **Type Testing**: TypeScript compiler for type safety validation
- **X Cards Validation**: Using [X Card Validator](https://cards-dev.twitter.com/validator)
- **Image Processing**: Sharp library testing for optimization accuracy
- **Database**: In-memory SQLite for fast test execution
- **Mocking**: Jest mocks for external services (S3, image processing)

## Deployment & Hosting

### MVP Deployment (Railway)
- **Application**: Single Node.js service with integrated React frontend
- **Database**: SQLite (local file) â†’ Railway PostgreSQL (production)
- **Images**: Railway persistent volumes in `/data/uploads` directory
- **Frontend**: Served by Express backend with React SSR/static serving
- **Repository**: GitHub (https://github.com/LampByLit/lynx)
- **CI/CD**: Railway auto-deploy from GitHub
- **Branding**: Part of LampByLit ecosystem (https://lampbylit.com)

### Railway Deployment Configuration

#### Railway Configuration Files
```toml
# railway.toml
[build]
builder = "NIXPACKS"

[deploy]
startCommand = "npm run start"
healthcheckPath = "/health"
healthcheckTimeout = 300
restartPolicyType = "ON_FAILURE"
restartPolicyMaxRetries = 10
```

```json
// package.json scripts
{
  "scripts": {
    "start": "node dist/app.js",
    "dev": "nodemon src/app.ts",
    "build": "tsc",
    "db:generate": "prisma generate",
    "db:push": "prisma db push",
    "db:migrate": "prisma migrate deploy",
    "postinstall": "prisma generate"
  }
}
```

#### Environment Variables (Railway)
```env
# Railway will provide these automatically
PORT=3000
RAILWAY_STATIC_URL=
RAILWAY_PUBLIC_DOMAIN=

# Database (Railway PostgreSQL)
DATABASE_URL=postgresql://username:password@host:port/database

# Application
NODE_ENV=production

# Rate Limiting (configurable)
RATE_LIMIT_WINDOW_MS=120000  # 2 minutes
RATE_LIMIT_MAX_REQUESTS=1    # 1 request per window

# File Upload
UPLOAD_MAX_SIZE=10485760     # 10MB
UPLOAD_DIR="/data/uploads"

# Branding
TWITTER_SITE_HANDLE="@lampbylit"
SITE_NAME="Lynx by LampByLit"
```

### Production Considerations
- **Railway PostgreSQL**: Automatic backups and scaling
- **Railway Volumes**: Persistent image storage
- **Railway Monitoring**: Built-in metrics and logging
- **SSL**: Automatic HTTPS with Railway domains
- **CDN**: Railway's global edge network

## Future Enhancements

### Potential Features
- Custom domains for branded links
- Scheduled card expiry
- Bulk link management
- API for third-party integrations
- White-label solutions
- Mobile app

### Monetization Strategy
- Freemium model with usage limits
- Premium features (analytics, custom domains)
- Enterprise plans for businesses
- API access for developers

## Success Metrics

### Key Performance Indicators
- User adoption rate
- Card creation volume
- Click-through rates
- User retention
- Platform reliability (uptime)

### Growth Targets
- Phase 1: 100 active users, 1000 cards created
- Phase 2: 1000 active users, 10,000 cards created
- Phase 3: 10,000 active users, 100,000 cards created

---

*This rules file has been updated with comprehensive X Cards documentation and technical requirements.*